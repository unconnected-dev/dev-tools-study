which <command>
Displays the full path of the executable that would run for the given command,
based on directories listed in your $PATH environment variable.


man <command>
Displays the manual (help) page for a command, showing its usage, options, 
and descriptions. Useful for getting detailed information about commands.

    [THING]
    Optional item. You can include it or leave it out.

    <THING>
    Required item. Must be provided.

    THING …
    Item can be repeated any number of times.

    THING1 | THING2
    Choose one item or the other, not both.

    THING (italicized)
    Placeholder. Replace with the actual value needed.


help <command>
Displays brief help and usage information for a shell builtin command.
Only works with bash builtins (e.g., cd, echo, export).


cat 1>> test_file.txt
Appends standard output (stdout) from `cat` to test_file.txt. The `1>>` means 
"append stdout" (file descriptor 1) rather than overwrite.


cat 1>> test_file.txt 2>> error_file.txt
Appends standard output (stdout) to test_file.txt and appends standard error 
(stderr) to error_file.txt. Useful for saving both outputs separately.


cat 0<input.txt
Reads standard input (stdin) for `cat` from input.txt using file descriptor 0.
Same as `cat < input.txt`, but explicitly uses fd 0.


cat 0< input.txt > /dev/pts/2
Reads input from input.txt (stdin) and sends output to /dev/pts/2, which is a 
terminal device (usually another user’s terminal or a second session).


date | cut --delimiter " " --fields 5 1> time.txt
Gets the current date, extracts the 5th field (usually the time), and writes 
it to time.txt. Standard output (stdout) is redirected using file descriptor 1.


tty
Prints the file name of the terminal connected to standard input. Useful for 
knowing which terminal device (like /dev/pts/0) you're using.


date | tee fulldate.txt | cut --delimiter=" " --field=1 1> day.txt
Gets the current date. `tee` saves the full date to fulldate.txt and also 
passes it on. `cut` extracts the first field (weekday) and saves it to day.txt.


xargs
Reads items from standard input and passes them as arguments to a command.
Useful for handling output from one command as input to another.


date | xargs echo "hello"
Appends the output of `date` as arguments to the `echo "hello"` command. 
The result is: hello <date output>. `xargs` inserts the date after "hello".


pwd
Prints the current working directory (the full path of where you are in the 
filesystem). Useful to know your location in the terminal.


file <filename>
Examines a file and tells you its type (text, binary, image, etc.) based on 
its content, not the file extension.

Example:
file photo.jpg
Might return: JPEG image data


mkdir <directory_name>
Creates a new directory with the given name in the current location or path.

Example:
mkdir new_folder

To create parent directories as needed:
mkdir -p parent/child


rmdir <directory_name>
Removes an **empty** directory. If the directory has files or subdirs, it 
won’t be deleted.

Example:
rmdir old_folder

To remove multiple empty directories:
rmdir dir1 dir2 dir3


rm -ri <directory_name>
Recursively deletes a directory and its contents, but **asks for confirmation**
before deleting each file or subdirectory.

Useful for safer deletions:
r = recursive, i = interactive prompt

Example:
rm -ri backup_folder


cp <source> <destination>
Copies files or directories from one location to another.

Examples:
cp file1.txt backup.txt
Copies file1.txt to backup.txt

cp file1.txt dir/
Copies file1.txt into directory dir/

cp -r dir1/ dir2/
Copies directory dir1 and all its contents into dir2 (r = recursive)



mv <source> <destination>
Moves or renames files and directories.

Examples:
mv file.txt archive/
Moves file.txt into the archive directory

mv oldname.txt newname.txt
Renames oldname.txt to newname.txt

mv dir1/ dir2/
Moves dir1 into dir2 (can also be used to rename directories)


locate <pattern>
Quickly finds files and directories matching the pattern by searching a 
pre-built index (faster than `find`).

Example:
locate notes.txt
Shows all paths containing notes.txt

To update the index (needed for recent changes):
sudo updatedb


locate --existing --follow <pattern>

--existing
Only shows results for files that still exist (filters out deleted ones).

--follow
Follows symbolic links during the database update (not typically used with 
locate itself, but with updatedb). Some implementations may ignore this.

Example:
locate --existing report.txt
Shows only existing paths to report.txt


find <path> <options> <tests> <actions>
Searches for files and directories in a directory hierarchy.

Examples:
find . -name "*.txt"
Finds all .txt files in the current directory and subdirectories

find /var -type f -size +10M
Finds files larger than 10 MB in /var

find . -type f -exec rm {} \;
Finds all files and deletes them (use with caution)

Common options:
-name        Match by filename
-type        f = file, d = directory
-size        Match by file size (+/- for greater/less)
-exec        Run a command on each result
-maxdepth    Limit how many directories to check down


find <path> <options> <tests> <actions>
Searches directories for files using various conditions.

Examples:
find . -name "*.txt" -o -name "*.md"
Finds files ending in .txt OR .md

find /etc \( -name "*.conf" -o -name "*.cfg" \)
Finds .conf OR .cfg files (grouped with escaped parentheses)

Key options:
-name       Match by filename
-type       f = file, d = directory
-size       Match by file size (+/-)
-exec       Run command on each result
-o          Logical OR to combine conditions


sudo find / -type f -size +100k -size -5M -exec cp {} ~/Desktop/copy_dir \;
Finds all files larger than 100 KB and smaller than 5 MB, then copies them 
to ~/Desktop/copy_dir. `sudo` allows access to system-wide locations.

Breakdown:
-type f           Only files
-size +100k       Larger than 100 KB
-size -5M         Smaller than 5 MB
-exec cp {} ...   Copies each matched file to the target directory

{} is replaced with each file path found.
\; ends the exec command.


sudo find / -type f -size +100k -size -5M -ok cp {} ~/Desktop/copy_dir \;
Same as -exec, but `-ok` prompts for confirmation before running the command 
on each file. Safer for bulk operations.

Use -ok instead of -exec if you want to review each action:
-type f           Only files
-size +100k       Larger than 100 KB
-size -5M         Smaller than 5 MB
-ok cp {} ...     Asks you (y/n) before copying each file

Example prompt:
< cp ... /path/to/file > ? 


tac <filename>
Displays the contents of a file in reverse order — **last line first**, 
first line last. (It's `cat` spelled backwards.)

Example:
tac notes.txt
Shows notes.txt from bottom to top



rev <filename>
Reverses the characters in each **line** of a file, not the order of lines.

Example:
rev words.txt
If a line is "hello", output is "olleh"

Also works with input:
echo "abc" | rev
Outputs: cba


less <filename>
Opens a file for **paged viewing**, one screen at a time. Useful for reading 
long files without loading the whole thing into memory.

Navigation keys:
SPACE       Scroll forward
b           Scroll backward
q           Quit
G           Go to end
g           Go to start
/pattern    Search for a pattern

Example:
less /var/log/syslog


head <filename>
Displays the **first 10 lines** of a file by default.

Options:
-n <number>   Show a specific number of lines

Examples:
head notes.txt
Shows first 10 lines of notes.txt

head -n 5 data.csv
Shows first 5 lines of data.csv


tail <filename>
Displays the **last 10 lines** of a file by default.

Options:
-n <number>   Show a specific number of lines
-f            Follow the file — shows new lines as they are added

Examples:
tail log.txt
Shows last 10 lines of log.txt

tail -n 20 notes.txt
Shows last 20 lines

tail -f /var/log/syslog
Live view of new log entries as they appear



uname
Displays system information such as kernel name and architecture.

Options:
-a   Show all system info
-r   Show kernel release
-m   Show machine hardware name (e.g., x86_64)

Examples:
uname -a
Shows full system info

uname -r
Shows kernel version


lsb_release
Displays Linux Standard Base and distribution-specific information.

Options:
-a   Show all available details
-d   Show description (e.g., Ubuntu 22.04 LTS)
-i   Show distributor ID
-r   Show release number
-c   Show codename

Example:
lsb_release -a
Shows full OS release info (distro, version, codename)
