docker build -t goals:latest .
- Builds an image from a Dockerfile in the current directory
- -t sets the name and tag (goals:latest)


docker run -p
- Maps container port to host port
- Format: -p <host_port>:<container_port>
- Example: docker run -p 8080:80 nginx  # Access at localhost:8080


docker stop
- Gracefully stops a running container
- Format: docker stop <container_id or name>
- Example: docker stop my_container


docker run node
- Runs a container from the official Node.js image
- Starts an interactive Node.js REPL by default
- Use -it to interact: docker run -it node
- Use --rm, to remove container once stopped

docker run -it sha256:<digest>
- Runs a container from a specific image by its SHA256 digest
- -it: interactive mode with terminal
- Useful when the image has no tag or to ensure exact version


docker ps -a
- Lists all containers (running + stopped)
- Use plain docker ps to show only running containers


--help
- Shows help for any Docker command
- Example: docker run --help


docker start
- Starts a stopped container (doesn’t create a new one)
- Non-blocking: container runs in background
- Use docker attach <name> to interact if needed

docker start -ai cool_hertz
- Starts a stopped container and attaches to it
- -a: attach stdout/stderr
- -i: interactive (keep STDIN open)
- Useful for resuming interactive containers

docker start and ports
- Reuses port mappings set during original docker run
- You can’t change ports with docker start
- To use different ports, create a new container with docker run -p


docker logs
- Shows stdout/stderr from a container
- Format: docker logs <container_id or name>
- Use -f to follow logs live (like tail -f)


docker rm
- Removes one or more stopped containers
- Format: docker rm <container_id or name>
- Use -f to force remove running containers


docker rmi
- Removes one or more images from the local machine
- Format: docker rmi <image_id or name>
- Use -f to force remove images that are in use by stopped containers


docker image prune
- Removes unused (dangling) images to free up space
- By default, removes images not tagged or associated with a container
- Use -a to remove all unused images, not just dangling ones


docker images
- Lists all images on the local machine
- Shows image ID, repository, tag, size, and more
- Use -a to show all images, including intermediate ones


docker image inspect
- Shows detailed JSON metadata about an image
- Format: docker image inspect <image_id or name>
- Useful for checking layers, environment vars, entrypoint, etc.


docker cp
- Copies files between host and container
- Format: docker cp <source> <dest>
- Example: docker cp my_container:/app/log.txt ./log.txt


docker tag
- Adds a new name/tag to an existing image
- Format: docker tag <source_image> <target_name>:<tag>
- Example: docker tag app:latest myrepo/app:v1


docker login / logout
- docker login: Authenticates with Docker Hub or a registry
  Format: docker login [registry]
- docker logout: Logs out from the registry
  Format: docker logout [registry]


docker push
- Uploads a tagged image to a registry (e.g. Docker Hub)
- Format: docker push <username>/<image>:<tag>
- Requires docker login and proper image tagging


docker pull
- Downloads an image from a registry (e.g. Docker Hub)
- Format: docker pull <image>:<tag>
- Example: docker pull nginx:latest


docker container prune
- Removes all stopped containers
- Frees up space, keeps running containers safe
- Add -f to skip confirmation: docker container prune -f



Bind Mounts
docker run -p 3000:80 -d --name feedback-app \
  -v feedback:/app/feedback \
  -v "/home/paul/.../docker_project_04:/app" \
  feedback-node:volumes

- Runs container in detached mode
- Maps host port 3000 → container port 80
- Named volume "feedback" → /app/feedback (persists data)
- Bind mount host project dir → /app (live sync with host)
- Container name: feedback-app
- Image: feedback-node:volumes

Note: Bind mount overrides image files at /app


docker volume ls
- Lists all Docker volumes on the system
- Shows volume names and drivers
- Use to identify named or dangling volumes


docker run --network my_network
- Connects the container to a specific network (e.g., custom bridge)
- Enables communication with other containers on that network
- Example: docker run --network my_net app


docker container inspect
- Shows detailed JSON metadata about a container
- Format: docker container inspect <name or ID>
- Includes info on volumes, networks, IP, mounts, ports, env vars, etc.


docker network ls
- Lists all Docker networks on the system
- Shows network name, ID, driver (e.g. bridge, host), and scope
- Use to view default and custom networks


docker run -d --name favorites --rm -p 3000:3000 --network my_net favorites-node

- Runs container in detached mode
- Automatically removes container when it stops (--rm)
- Maps host port 3000 → container port 3000
- Connects to custom network "my_net"
- Names the container "favorites"
- Uses image "favorites-node"


docker-compose up
- Starts all services defined in docker-compose.yml
- Builds images if needed
- Use -d to run in detached mode: docker-compose up -d
- Stops and removes containers with: docker-compose down


docker-compose down
- Stops and removes containers, networks, and default volumes created by up
- Use flags to remove more:
  • --volumes to remove named volumes
  • --rmi all to remove images
- Cleans up everything created by docker-compose up
